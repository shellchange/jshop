package net.jeeshop.services.front.product.impl;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.ServersManager;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.LRULinkedHashMap;import net.jeeshop.services.front.catalog.bean.Catalog;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductImageInfo;import net.jeeshop.services.front.product.bean.ProductStockInfo;import net.jeeshop.services.front.product.dao.ProductDao;import net.jeeshop.services.manage.gift.GiftService;import net.jeeshop.services.manage.gift.bean.Gift;import net.jeeshop.web.action.front.phone.PhoneAction;import net.jeeshop.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ProductServiceImpl extends ServersManager<Product, ProductDao> implements		ProductService {	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ProductServiceImpl.class);	@Autowired	private GiftService giftService;	    @Override    @Autowired    public void setDao(ProductDao productDao) {        this.dao = productDao;    }	@Override	public void upGoods(String[] ids) {		upOrDown(ids, 1);	}	@Override	public void downGoods(String[] ids) {		upOrDown(ids, 2);	}	/**	 * @param ids	 */	private void upOrDown(String[] ids, int status) {		if (ids == null || ids.length == 0) {			return;		}		for (int i = 0; i < ids.length; i++) {			Product goods = new Product();			goods.setId(ids[i]);			goods.setStatus(status);			dao.update(goods);		}	}	@Override	public List<Product> search(Product e) {		return dao.selectList(e);	}	@Override	public List<Product> selectParameterList(String id) {		return dao.selectParameterList(id);	}	@Override	public List<ProductStockInfo> selectStockList(Product product) {		return dao.selectStockList(product);	}	@Override	public List<Product> selectListProductHTML(Product product) {		return dao.selectListProductHTML(product);	}	@Override	public List<Product> selectProductListByIds(Product p) {		return dao.selectProductListByIds(p);	}	@Override	public List<Product> selectHotSearch(Product p) {		return dao.selectHotSearch(p);	}	@Override	public List<Product> loadHotProductShowInSuperMenu(Product product) {		return dao.loadHotProductShowInSuperMenu(product);	}	@Override	public void updateHit(Product p) {        dao.updateHit(p);	}	@Override	public List<Product> selectPageLeftHotProducts(Product p) {		return dao.selectPageLeftHotProducts(p);	}	@Override	public List<Product> selectActivityProductList(Product p) {		return dao.selectActivityProductList(p);	}		/**	 * 用户浏览的商品信息存储在session中	 * 由于存储的数量有限，每一个sessin中只存储最近的10个商品，并且只存储一些基本的信息,如：商品ID、商品名称、现价、原价。	 * 这里需要用到数量固定的缓存策略，最后浏览的商品在第一个位置	 */	@Override	public void saveHistoryProductToSession(Product e) {//		List<Product> history_product_list = (List<Product>) getSession().getAttribute(FrontContainer.history_product_list);		LinkedHashMap<String, Product> history_product_map = (LinkedHashMap<String, Product>) RequestHolder.getSession().getAttribute(FrontContainer.history_product_map);//		LinkedHashMap<String, String> map = new LRULinkedHashMap<String, String>(16, 0.75f, true);		if(history_product_map==null){			history_product_map = new LRULinkedHashMap<String, Product>(16, 0.75f, true);			RequestHolder.getSession().setAttribute(FrontContainer.history_product_map,history_product_map);		}				//添加浏览过的商品信息到集合		Product pro = new Product();		pro.setId(e.getId());		pro.setName(e.getName());		pro.setPrice(e.getPrice());		pro.setNowPrice(e.getNowPrice());		pro.setPicture(e.getPicture());		history_product_map.put(e.getId(),pro);				//分离数据，方便页面显示//		Collection<Product> historyList = history_product_map.values();//		for(int i=historyList.size()-1;i>=0;i--){//			historyList.//		}	}	/**	 * 根据商品ID检查商品信息	 * @return	 */	@Override	public Catalog checkProduct(Product e) {		if(e==null){			throw new NullPointerException("根据商品ID查询不到指定的商品信息！");		}		if(StringUtils.isBlank(e.getCatalogID())){			throw new NullPointerException("商品无类别！");		}				/**		 * 如果商品绑定了赠品，则读取绑定的赠品信息		 */		if(StringUtils.isNotBlank(e.getGiftID())){			Gift gift = giftService.selectById(e.getGiftID());			e.setGift(gift);		}				/**		 * 根据商品信息去查询它的分类		 */		Catalog item = SystemManager.getInstance().getCatalogsMap().get(e.getCatalogID());		if(item==null){			throw new NullPointerException("商品数据异常！");		}		return item;	}	/**	 * 商品详情页面，图片列表的处理	 */	@Override	public void productImagesBiz(String imagesStr, Product e) {		if(StringUtils.isBlank(imagesStr)){			return;		}				String[] images = imagesStr.split(FrontContainer.product_images_spider);		logger.error("e.getImages()="+e.getImages());		if(e.getProductImageList()==null){			e.setProductImageList(new LinkedList<ProductImageInfo>());		}else{			e.getProductImageList().clear();		}		for(int i=0;i<images.length;i++){			String img = images[i].trim();			int lastIndex = img.lastIndexOf("_");			String left = img.substring(0, lastIndex+1);			String right = img.substring(lastIndex+2);			logger.error("left = "+left+",right="+right);						e.getProductImageList().add(new ProductImageInfo(left+"1"+right,left+"2"+right,left+"3"+right));		}	}	}